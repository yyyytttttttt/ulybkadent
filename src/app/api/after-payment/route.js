// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç API-—Ä–æ—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Node.js (–∞ –Ω–µ Edge Runtime)
export const runtime = 'nodejs'

import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import PDFDocument from 'pdfkit'
import { Readable } from 'stream'
import fs from 'fs'
import path from 'path'

// üîß –ü—É—Ç—å –∫ Roboto-Regular.ttf –∏–∑ public/fonts
const FONT_PATH = path.join(process.cwd(), 'public', 'fonts', 'Roboto-Regular.ttf')

// üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async function generatePdf({ name, amount }) {
  if (!fs.existsSync(FONT_PATH)) {
    throw new Error(`‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${FONT_PATH}`)
  }

  const doc = new PDFDocument()
  const stream = new Readable({ read() {} })

  doc.on('data', chunk => stream.push(chunk))
  doc.on('end', () => stream.push(null))

  doc.registerFont('Roboto', FONT_PATH)
  doc.font('Roboto')

  doc.info = {
    Title: '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
    Author: '–£–ª—ã–±–∫–∞'
  }

  doc.fontSize(24).text('üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', { align: 'center' })
  doc.moveDown()
  doc.fontSize(18).text(`–ò–º—è: ${name}`)
  doc.text(`–°—É–º–º–∞: ${amount}‚ÇΩ`)
  doc.text(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`)

  doc.end()

  const chunks = []
  for await (const chunk of stream) chunks.push(chunk)
  return Buffer.concat(chunks)
}

// üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
async function sendEmailWithAttachment({ email, name, pdfBuffer }) {
  const transporter = nodemailer.createTransport({
    host: 'smtp.mail.ru',
    port: 465,
    secure: true,
    auth: {
      user: process.env.MAIL_USER,
      pass: process.env.MAIL_PASS
    }
  })

  await transporter.sendMail({
    from: `"–£–ª—ã–±–∫–∞" <${process.env.MAIL_USER}>`,
    to: email,
    bcc: process.env.ADMIN_EMAIL,
    subject: '–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}! –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.`,
    attachments: [
      {
        filename: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf',
        content: pdfBuffer
      }
    ]
  })
}

// üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
export async function POST(req) {
  try {
    const body = await req.json()
    const { name, email, amount } = body.object?.metadata || {}

    if (!name || !email || !amount) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }, { status: 400 })
    }

    const pdfBuffer = await generatePdf({ name, amount })
    await sendEmailWithAttachment({ email, name, pdfBuffer })

    return NextResponse.json({ success: true })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err)
    return NextResponse.json({ error: String(err.stack) }, { status: 500 })
  }
}
