import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import PDFDocument from 'pdfkit'
import { Readable } from 'stream'

async function generatePdf({name,amount}) {
    const doc = new PDFDocument()
    const stream = new Readable({read(){} })
    doc.on('data', chunk => stream.push(chunk))
    doc.on('end',()=>stream.push(null))
    doc.fontSize(24).text('üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', { align: 'center' })
    doc.moveDown()
    doc.fontSize(18).text(`–ò–º—è: ${name}`)
    doc.text(`–°—É–º–º–∞ :${amount}‚ÇΩ`)
    doc.text(`–î–∞—Ç–∞: ${new Date().toLocaleDateString()}`)
    doc.end()
    const chunks =[]
    for await (const chunk of stream) chunks.push(chunk)
    return Buffer.concat(chunks)
}
async function sendEmailWithAttachment({email,name,pdfBuffer}) {
    const transporter = nodemailer.createTransport({
        service:'Mail.ru',
        host:'smtp.mail.ru',
        port:465,
        secure:true,
        auth:{
            user: process.env.MAIL_USER,
            pass: process.env.MAIL_PASS

        }


    })
    await  transporter.sendMail({
        from:`"–£–ª—ã–±–∫–∞" <${process.env.MAIL_USER}>`,
        to: email,
        bcc: process.env.ADMIN_EMAIL,
        subject:'–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
        text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}! –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.`,
        attachments:[
            {
                filename: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf',
                content: pdfBuffer,
            }
        ]
    })
    
}
export async function POST(req) {
    try{
        const body = await req.json()
        const {name ,email,amount}=body.object.metadata
        const pdfBuffer =await generatePdf({name,amount})
        await sendEmailWithAttachment({email,name,pdfBuffer})
        return NextResponse.json({success:true})
        
    }
    catch (err){
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err)
        return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })

    }
    
}