// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ API-—Ä–æ—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Node.js
export const runtime = 'nodejs'

import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import fs from 'fs'
import path from 'path'

// üìç –ü—É—Ç—å –∫ PNG-—Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
const CERT_IMAGE_PATH = path.join(process.cwd(), 'public', 'certificates', 'default-certificate.png')

// üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
async function sendEmailWithCertificate({ email, name }) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!fs.existsSync(CERT_IMAGE_PATH)) {
      throw new Error(`‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç PNG –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${CERT_IMAGE_PATH}`)
    }

    const imageBuffer = fs.readFileSync(CERT_IMAGE_PATH)

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è mail.ru
    const transporter = nodemailer.createTransport({
      host: 'smtp.mail.ru',
      port: 465, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –¥–ª—è SSL
      secure: true, // true –¥–ª—è –ø–æ—Ä—Ç–∞ 465
      auth: {
        user: process.env.MAIL_USER,
        pass: process.env.MAIL_PASS
      },
      connectionTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      socketTimeout: 10000,    // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
      logger: true,            // –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      debug: true              // –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await transporter.verify()

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    const info = await transporter.sendMail({
      from: `"–£–ª—ã–±–∫–∞" <${process.env.MAIL_USER}>`,
      to: email,
      bcc: process.env.ADMIN_EMAIL,
      subject: '–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
      text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}! –í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.`,
      html: `
        <div>
          <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</h2>
          <p>–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.</p>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –£–ª—ã–±–∫–∞</p>
        </div>
      `,
      attachments: [
        {
          filename: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.png',
          content: imageBuffer,
          contentType: 'image/png'
        }
      ]
    })

    console.log('–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', info.messageId)
    return info
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error)
    throw error
  }
}

// üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
export async function POST(req) {
  try {
    const body = await req.json()
    const { name, email } = body.object?.metadata || {}

    if (!name || !email) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –∏–ª–∏ email' }, 
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
        { status: 400 }
      )
    }

    await sendEmailWithCertificate({ email, name })

    return NextResponse.json(
      { success: true, message: '–ü–∏—Å—å–º–æ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' },
      { status: 200 }
    )
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', err)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
    const status = err.code === 'ETIMEDOUT' ? 504 : 500
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞',
        details: process.env.NODE_ENV === 'development' ? err.message : undefined
      },
      { status }
    )
  }
}