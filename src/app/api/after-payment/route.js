// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ API-—Ä–æ—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Node.js
export const runtime = 'nodejs'

import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import fs from 'fs'
import path from 'path'

// üìç –ü—É—Ç—å –∫ PNG-—Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
const CERT_IMAGE_PATH = path.join(process.cwd(), 'public', 'certificates', 'default-certificate.png')

// üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
async function sendEmailWithCertificate({ email, name }) {
  if (!fs.existsSync(CERT_IMAGE_PATH)) {
    throw new Error(`‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç PNG –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${CERT_IMAGE_PATH}`)
  }

  const imageBuffer = fs.readFileSync(CERT_IMAGE_PATH)

  const transporter = nodemailer.createTransport({
    host: 'smtp.mail.ru',
    port: 465,
    secure: true,
    auth: {
      user: process.env.MAIL_USER,
      pass: process.env.MAIL_PASS
    }
  })

  await transporter.sendMail({
    from: `"–£–ª—ã–±–∫–∞" <${process.env.MAIL_USER}>`,
    to: email,
    bcc: process.env.ADMIN_EMAIL,
    subject: '–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}! –í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.`,
    attachments: [
      {
        filename: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.png',
        content: imageBuffer,
        contentType: 'image/png'
      }
    ]
  })
}

// üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
export async function POST(req) {
  try {
    const body = await req.json()
    const { name, email } = body.object?.metadata || {}

    if (!name || !email) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }, { status: 400 })
    }

    await sendEmailWithCertificate({ email, name })

    return NextResponse.json({ success: true })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', err)
    return NextResponse.json({ error: String(err.stack) }, { status: 500 })
  }
}
