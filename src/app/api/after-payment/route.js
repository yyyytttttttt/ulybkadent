// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ API-—Ä–æ—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Node.js
export const runtime = 'nodejs'

import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import fs from 'fs'
import path from 'path'

// üìç –ü—É—Ç—å –∫ PNG-—Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
const CERT_IMAGE_PATH = path.join(process.cwd(), 'public', 'certificates', 'default-certificate.png')

// üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SMTP Mailopost
async function sendEmailWithCertificate({ email, name }) {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (!fs.existsSync(CERT_IMAGE_PATH)) {
      throw new Error(`‚ùå –§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${CERT_IMAGE_PATH}`)
    }

    // 2. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const imageBuffer = fs.readFileSync(CERT_IMAGE_PATH)

    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    const transporter = nodemailer.createTransport({
      host: 'smtp.msndr.net', // SMTP-—Å–µ—Ä–≤–µ—Ä Mailopost
      port: 465,              // –ü–æ—Ä—Ç –¥–ª—è SSL (–∏–∑ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
      secure: true,            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL
      auth: {
        user: 'ulybkadent@mail.ru', // –í–∞—à –ª–æ–≥–∏–Ω –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pass: '51d63a19927a083ee96a8facbd1a5b9f' // API-–∫–ª—é—á –∫–∞–∫ –ø–∞—Ä–æ–ª—å
      },
      tls: {
        rejectUnauthorized: true
      },
      connectionTimeout: 10000,   // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      logger: true               // –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    })

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    const info = await transporter.sendMail({
      from: '"–£–ª—ã–±–∫–∞" <ulybkadent@mail.ru>', // –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ª–æ–≥–∏–Ω–æ–º
      to: email,
      subject: `–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, ${name}!`,
      html: `
        <div style="font-family: Arial, sans-serif;">
          <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</h2>
          <p>–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.</p>
        </div>
      `,
      attachments: [{
        filename: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.png',
        content: imageBuffer,
        contentType: 'image/png'
      }]
    })

    console.log('–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', info.messageId)
    return info
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error)
    throw error
  }
}

// üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
export async function POST(req) {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { name, email } = await req.json()

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !email) {
      return NextResponse.json(
        { error: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ email' },
        { status: 400 }
      )
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
        { status: 400 }
      )
    }

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    await sendEmailWithCertificate({ email, name })

    return NextResponse.json(
      { success: true, message: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' },
      { status: 200 }
    )
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API:', error)
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    )
  }
}